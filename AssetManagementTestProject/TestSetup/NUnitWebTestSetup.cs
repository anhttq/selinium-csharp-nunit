using AssetManagementTestProject.DAO;
using AssetManagementTestProject.DataFromUI;
using AssetManagementTestProject.PageObj;
using AssetManagementTestProject.Services;
using AssetManagementTestProject.TestData;
using CoreFramework.DriverCore;
using CoreFramework.NUnitTestSetup;
using CoreFramework.Asserter;
using NUnit.Framework;
using CoreFramework.Configs;

namespace AssetManagementTestProject.TestSetup;
public class NUnitWebTestSetup : NUnitTestSetup
{
    #region INIT PAGE OBJS + ASSERTER
    protected Asserter? Asserter;
    protected Guru99Page? Guru99Page;
    //protected ChangePassword1stTimePage? ChangePw1stTime;
    //protected ChangePasswordPage? ChangePassword;
    //protected CreateAssetPage? CreateAssetPage;
    //protected CreateNewCategoryPage? CreateNewCategoryPage;
    //protected CreateUserPage? CreateUserPage;
    //protected DetailedUserInfoPage? DetailedUserInfoPage;
    //protected EditUserInfoPage? EditUserInfoPage;
    //protected HomePage? HomePage;
    //protected LeftMenuPage? MenuBarLeft;
    //protected LoginPage? LoginPage;
    //protected LogoutPopupPage? LogoutPopup;
    //protected ManageUserPage? ManageUserPage; 
    //protected ManageAssetPage? ManageAssetPage;
    
    #endregion
    #region INIT DAO + DATA FROM UI
    protected CreateUserDAO.CreateUserResponse? NewUser;
    protected GetUserDAO.GetCanDisableUser? UserToBeDisabled;
    protected DisableUserDAO.DisableUserRequest? DisabledUser;
    protected DisableUserDAO.DisableUserResponse? DisableUserResponse;
    protected ViewUserDAO.ViewDetailedUser? ActualDetailedUserInfoFromUI;
    protected UserDataFromUI? UserDataFromUI;
    protected CreateNewCategory? CreateNewCategory;
    #endregion
    #region INIT API SERVICES
    protected AssetManagementAPIServices? APIService;
    protected AssetManagementAPIServices? AuthorizationService;
    protected string? NewAdminPassword;
    protected string? NewAdminUsername;
    protected string? Token;

    public NUnitWebTestSetup(string browser) : base(browser)
    {
    }
    #endregion

    [SetUp]
    public void WebTestSetUp()
    {
        /// Initialize header pages
        //ChangePw1stTime = new ChangePassword1stTimePage();
        //ChangePassword = new ChangePasswordPage();
        //CreateAssetPage = new CreateAssetPage();
        //CreateUserPage = new CreateUserPage();
        //CreateNewCategoryPage = new CreateNewCategoryPage();
        //CreateNewCategory = new CreateNewCategory();
        Guru99Page = new Guru99Page();
        DriverBaseAction = new WebDriverAction();
        DriverBaseAction.GoToUrl(ConfigManager.GetConfig<AppConfig>("Application").BaseUrl);
        ConfigManager_ = new ConfigManager();
        Asserter = new Asserter();
        //LoginPage = new LoginPage();
        //HomePage = new HomePage();
        //LogoutPopup = new LogoutPopupPage();
        //MenuBarLeft = new LeftMenuPage();
        //ManageUserPage = new ManageUserPage();
        //ManageAssetPage = new ManageAssetPage();
        //UserDataFromUI = new UserDataFromUI();
        /// Create data with API for testing
        //AuthorizationService = new AssetManagementAPIServices();
        //Token = AuthorizationService.ReturnLoginToken(Constant.ADMIN_USERNAME_HN, Constant.ADMIN_PASSWORD);
        //APIService = new AssetManagementAPIServices();
        //NewUser = APIService.ReturnNewUser(CreateUserData.NEW_ADMIN_HN, Token);
        //FirstTimeLoginData newLoginData = new FirstTimeLoginData();
        //newLoginData.NewUser = NewUser;
        //NewAdminUsername = newLoginData.GetUsername();
        //NewAdminPassword = newLoginData.GetPassword();
    }
    //[TearDown]
    //public void WebTestTearDown()
    //{
    //    // Check if user created with API with no valid assignment can be disabled 
    //    UserToBeDisabled = APIService.ReturnCanDisableUser(NewUser.Data.Id.ToString(), Token);
    //    // Clean data generated by API if any
    //    if (UserToBeDisabled.Message == Constant.USER_CAN_BE_DISABLED_MSG)
    //    {
    //        if (NewUser.Data.Location == Constant.LOCATION_HANOI)
    //        {
    //            DisabledUser = new DisableUserDAO.DisableUserRequest(NewUser.Data.Id, (int)Constant.Locations.HaNoi);
    //            DisableUserResponse = APIService?.ReturnDisableUserResponse(DisabledUser, Token);
    //        }
    //        else if (NewUser.Data.Location == Constant.LOCATION_HCM)
    //        {
    //            DisabledUser = new DisableUserDAO.DisableUserRequest(NewUser.Data.Id, (int)Constant.Locations.HoChiMinh);
    //            DisableUserResponse = APIService?.ReturnDisableUserResponse(DisabledUser, Token);
    //        }
    //    }
    //}
}
